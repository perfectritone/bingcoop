require 'spec_helper'

describe "User Pages" do
  subject { page }
  
  describe "signup page" do
    before { visit signup_path }
    
    it { should have_selector('title', text: full_title('Sign Up')) }
  end
  
  describe "signup" do

    before { visit signup_path }

    let(:submit) { "Create my account" }

    describe "with invalid information" do
      it "should not create a user" do
        expect { click_button submit }.not_to change(User, :count)
      end
    end

    describe "with valid information" do
      before do
        fill_in "Name",         with: "Example User"
        fill_in "Email",        with: "user@example.com"
        fill_in "Password",     with: "foobar"
        fill_in "Confirmation", with: "foobar"
      end

      it "should create a user" do
        expect { click_button submit }.to change(User, :count).by(1)
      end
    end
  end
  
  describe "profile page" do
    let(:user) { FactoryGirl.create(:user) }
    before { visit user_path(user) }
    
    it { should have_selector('title', text: full_title(user.name)) }
  end
  
  describe "edit user" do
    let(:user) { FactoryGirl.create(:user) }
    before do
      sign_in user
      visit edit_user_path(user)
    end
    
    it { should have_selector('title', text: full_title("Edit your information")) }
    it { should have_selector('h1', text: "Update Your Profile") }
    
    describe "with valid information" do
      let(:updated_name) { "New Name" }
      let(:updated_email) { "newemail@gmail.com" }
      before do
        fill_in "Name", with: updated_name
        fill_in "Email", with: updated_email
        fill_in "Password", with: user.password
        fill_in "Confirmation", with: user.password
        click_button "Update my account"
      end
      
      it {         save_and_open_page;should have_selector('title', text: updated_name) }
      it { should have_selector('div.alert.alert-success') }
      it { should have_link('Log out', href: signout_path) }
      specify { user.reload.name.should == updated_name }
      specify { user.reload.email.should == updated_email }
    end
  end
end
